/**
 * Title:        Features
 * Description:
 * Copyright:    Copyright (c) 2001
 * Company:      Ohio University
 * @author Jaikumar Arumugam
 * @version 1.0
 */

package edu.ohiou.labimp.gtk3d;

import edu.ohiou.labimp.draw.DrawWFPanel;
import java.awt.Dimension;
import java.util.LinkedList;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.vecmath.Matrix4d;
import javax.vecmath.Point3d;
import javax.vecmath.Vector3d;

import edu.ohiou.labimp.draw.DrawWFApplet;
import edu.ohiou.labimp.draw.DrawWFPanel;
import edu.ohiou.labimp.gtk2d.InvalidPlaneException;

public class Arc extends CurveSegment {

	// Class parameters.
	Point3d center = new Point3d(); // ORIGIN (0,0,0)
	Vector3d normal = new Vector3d(0, 0, 1); // Z-Axis
	double radius;
	double startAngle = 0; // in radian; // in radians
	double endAngle = 2 * Math.PI;
	int segments = 50;

	// CONSTRUCTORS
	/** Default Constructor.
	 *  Creates a circle with unit radius and normal along Z-axis.
	 */
	public Arc() {
		radius = 1.0;
			}

	/** Constructor taking in parameters for creating circle.
	 *
	 */
	public Arc(double arcRadius, Point3d centerPt, Vector3d normalVec) {
		radius = arcRadius;
		center = new Point3d(centerPt);
		normal = new Vector3d(normalVec);
			}

	/** Constructor taking all parameters for an arc.
	 *
	 */
	public Arc(double rad, Point3d cen, Vector3d vec, double start, double end) {
		this(rad, cen, vec);
		startAngle = start;
		endAngle = end;
		
	}

	/** Constructor taking all parameters for an arc.
	 *
	 */
	public Arc(
		double rad,
		Point3d cen,
		Vector3d vec,
		Point3d startPt,
		Point3d endPt) {
		this(rad, cen, vec);
		Matrix4d inverseMatrix = Ellipse.getInverseMatrix(cen, vec);
		Point3d startPoint = new Point3d(startPt);
		inverseMatrix.transform(startPoint);
		Point3d endPoint = new Point3d(endPt);
		inverseMatrix.transform(endPoint);
		System.out.println("In 2D: start pt = "
			+ startPoint
			+ ", end point = "
			+ endPoint);
		Vector3d startVec = new Vector3d(startPoint);
		startAngle = GeometryConstants.X_VECTOR.angle(startVec);
		if (!Ellipse.isPositive(startVec)) {
			//      startAngle = 2*Math.PI - startAngle;
			startAngle = startAngle * (-1);
		}
		Vector3d endVec = new Vector3d(endPoint);
		endAngle = GeometryConstants.X_VECTOR.angle(endVec);
		if (!Ellipse.isPositive(endVec)) {
			//      endAngle = 2*Math.PI - endAngle;
			endAngle = endAngle * (-1);
		}
	}

	/** Copy Constructor for an arc.
	 *
	 */
	public Arc(Arc inArc) {
		this(inArc.getRadius(), inArc.getCenter(), inArc.getNormal(), inArc
			.getStartAngle(), inArc.getEndAngle());
	}

	/** Method that sets normal direction of arc.
	 *
	 */
	public void setNormal(Vector3d v) {
		normal = new Vector3d(v);
	}

	/** Method that sets center of arc.
	 *
	 */
	public void setCenter(Point3d arcCenter) {
		center = new Point3d(arcCenter);
	}

	/**
	 *
	 *    Method to return tree representation of arc object.
	 *    @return
	 *
	 */

	public DefaultMutableTreeNode getTree() {
		return new DefaultMutableTreeNode(this);
	}

	/**
	 * Method that returns center of arc.
	 *
	 *
	 */

	public Point3d getCenter() {
		return new Point3d(center);
	}

	/**
	 * Method that returns normal direction of arc.
	 *
	 *
	 */

	public Vector3d getNormal() {
		return new Vector3d(normal);
	}

	/**
	 * Method that returns radius of arc.
	 *
	 *
	 */

	public double getRadius() {
		return radius;
	}

	/**
	 * Method that returns start angle of arc.
	 *
	 *
	 */

	public double getStartAngle() {
		return startAngle;
	}

	/**
	 * Method that returns end angle of arc.
	 *
	 *
	 */

	public double getEndAngle() {
		return endAngle;
	}
	
	
	
	/**
	 * Method that returns start point of arc.
	 *
	 *
	 */

	public Point3d getStartPoint() {
		return this.getPointForAngle(startAngle);
	}

	/**
	 * Method that returns end point of arc.
	 *
	 *
	 */

	public Point3d getEndPoint() {
		return this.getPointForAngle(endAngle);
	}

	/** Method to get point on arc based on angle.
	 *
	 */
	public Point3d getPointForAngle(double angle) {
		return new Ellipse(radius, radius, center, normal, startAngle, endAngle)
			.getPointForAngle(angle);
	}

	/**todo
	 *
	 */
	public Vector3d getTangent(Point3d point) {
		return null;
	}

	/** Method to test whether given point lies within arc limits.
	 *
	 */
	public boolean isPointInLimits(Point3d testPoint) {
		return testPointOnArc(testPoint, false);
	}

	/** Method to test whether given point lies on arc or not.
	 *
	 */
	public boolean isPointOnArc(Point3d testPoint) {
		return testPointOnArc(testPoint, true);
	}

	/** Method to test whether given point lies on arc or not.
	 *
	 */
	private boolean testPointOnArc(Point3d testPoint, boolean type) {
		try {
			// PHASE 1: Check whether point in on arc plane.
			Plane arcPlane = new Plane(center, normal);
			if (!arcPlane.contains(testPoint))
				return false;
			else
				System.out.println(testPoint + " lies on arc plane!");
			if (type) {
				// PHASE 2: Check whether point lies within radius distance.
				double distance = center.distance(testPoint);
				if (Math.abs(distance) > radius)
					return false;
				else
					System.out.println(testPoint + " lies within arc radius!");
			}
			// PHASE 3: Check whether point lies between arc start and end angles.
			Matrix4d inverseMatrix = Ellipse.getInverseMatrix(center, normal);
			Point3d test = new Point3d(testPoint);
			inverseMatrix.transform(test);
			// if test point transformed to 2D is origin, then it lies on the arc.
			if (Gtk.isZeroVector(test))
				return true;
			Vector3d testVec = new Vector3d(test);
			double angle = GeometryConstants.X_VECTOR.angle(testVec);
			angle = angle % (Math.PI * 2);
			System.out.println("angle between "
				+ testVec
				+ " and "
				+ GeometryConstants.X_VECTOR
				+ " = "
				+ angle);
			if (!Ellipse.isPositive(testVec)) {
				angle *= -1;
				//	angle += Math.PI*2;
			}
			double start = startAngle % (Math.PI * 2);
			double end = endAngle % (Math.PI * 2);
			//      start = start%(Math.PI*2);
			//      end = end%(Math.PI*2);
			if (start > end) {
				//	end += Math.PI*2;
				start = Math.PI * 2 - start;
				start *= -1;
			}
			System.out.println("start = "
				+ start
				+ ", end = "
				+ end
				+ ", angle = "
				+ angle);
			return (angle >= start && angle <= end);
			//      Plane startPlane = new Plane(GeometryConstants.ORIGIN,new Point3d(0,0,1),start);
			//      Plane endPlane = new Plane(new Point3d(0,0,1),GeometryConstants.ORIGIN,end);
			//      return (startPlane.distancePointPlane(test) >= 0 && endPlane.distancePointPlane(test) >= 0);
		} catch (InvalidPlaneException ipe) {
			System.out.println("In Arc/isPointOnArc, Invalid Plane");
		}
		return false;
	}


  /**
   * @todo dnsormaz chandu added this method 11/11/2005
   * @param transformMatrix Matrix4d
   * @return Arc
   */
   public Arc transform(Matrix4d transformMatrix) {
		Point3d newCenter = new Point3d();
		Vector3d newNormal = new Vector3d();
		transformMatrix.transform(this.center, newCenter);
		transformMatrix.transform(this.normal, newNormal);
		return new Arc(
			this.radius,
			newCenter,
			newNormal,
			this.startAngle,
			this.endAngle);
	}
  /**
   * method that swaps (???) start and end points
   * @todo dnsormaz chandu added this method 11/11/2005
   * @return CurveSegment
   */
  public CurveSegment swap() {
		double nStart, nEnd;
		nStart = Math.PI - this.getEndAngle();
		nEnd = Math.PI - this.getStartAngle();
		Vector3d nNormal = new Vector3d();
		nNormal.negate(this.getNormal());
		Arc newArc = new Arc(radius, center, nNormal, nStart, nEnd);
		System.out.println(this + " swapped to " + newArc);
		return newArc;
	}
	/**
	 * String representation of an arc.
	 *
	 *
	 */

	public String toString() {
		StringBuffer buf = new StringBuffer(getClass().getName());
		buf.append(" <rad ").append(Double.toString(radius)).append(
			">, <center ").append(center.toString()).append(">, <norm ")
			.append(normal.toString()).append(">, <start ").append(
				Double.toString(startAngle)).append(">, <end ").append(
				Double.toString(endAngle)).append(">");
		return buf.toString();
	}

	/**
	 * init method.
	 *
	 *
	 */

	public void init() {
		//    super.init();
		panel = new JPanel();
		this.panel.add(new JLabel(this.toString()));
		this.panel.setSize(new Dimension(650, 60));
	}

	/** getShapeList() method.
	 *
	 */
	public LinkedList getShapeList(DrawWFPanel canvas) {
		return new Ellipse(radius, radius, center, normal, startAngle, endAngle)
			.getShapeList(canvas);
		//    Arc2D.Double arc = new Arc2D.Double(10,10,60,60,30,150,Arc2D.PIE);
		//    LinkedList shapes = new LinkedList();
		//    shapes.add(arc);
		//    return shapes;
	}

	/** Main method.
	 *
	 */
	public static void main(String[] args) {
		//    Arc c = new Arc(0.2, new Point3d(0.5,0.3,0.5), new Vector3d(0,1,0), 0, 2*Math.PI);
		Arc c = new Arc(
			4,
			new Point3d(0, 0, 0),
			new Vector3d(0, 0, -1),
			1.0,
			2.0);
		Arc c1 = (Arc) c.swap();
		System.out.println(c1.toString());
		Point3d testPoint = new Point3d(-2, -2, 0);
		System.out.println("is "
			+ testPoint
			+ " on arc? "
			+ c.isPointOnArc(testPoint) + " " + c1.isPointOnArc(testPoint));
		System.out.println("Start and end points of c: "+ c.getStartPoint() + " " + c.getEndPoint());
		System.out.println("Start and end points of c1: "+ c1.getStartPoint() + " " + c1.getEndPoint());
		c.setApplet(new DrawWFApplet(c, new Point3d(0, 0, 30), 20));
		c.display("Arc", new Dimension(650, 700), JFrame.EXIT_ON_CLOSE);
		c1.setApplet(new DrawWFApplet(c1, new Point3d(0, 0, 30), 20));
		c1.display("Arc", new Dimension(650, 700), JFrame.EXIT_ON_CLOSE);
	}
}
